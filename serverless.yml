# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: followers # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
  #stage: dev
  region: eu-west-3

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-west-3:043404835066:table/*"
#    AccessDeniedException: User: arn:aws:sts::043404835066:assumed-role/followers-dev-eu-west-3-lambdaRole/followers-dev-collectFolllowers is not authorized to perform: dynamodb:PutItem on resource: arn:aws:dynamodb:eu-west-3:043404835066:table/followers
#    arn:aws:dynamodb:eu-west-3:043404835066:table/followers
#   Resource: "arn:aws:dynamodb:region:account-id:table/table-name"
# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  collectFollowers:
    handler: followersHandler.collectFollowers
    events: # The Events that trigger this Function
#      - schedule: rate(5 minutes)
      - schedule:
          rate: cron(0 * * * ? *)
          input:
            accountIds:
              - adrelanine
              - glgv__
              - jikamanu
              - homiesfromparis
              - dvnentity
    package:
      include:
        followers.js
  getFollowers:
    handler: followersHandler.getFollowers
    events:
      - http:
          path: followers/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: adrelanineFollowers
        AttributeDefinitions:
          - AttributeName: checkedDate
            AttributeType: S
          - AttributeName: followers
            AttributeType: N
        KeySchema:
          - AttributeName: checkedDate
            KeyType: HASH
          - AttributeName: followers
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    glgvTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: glgv__Followers
        AttributeDefinitions:
          - AttributeName: checkedDate
            AttributeType: S
          - AttributeName: followers
            AttributeType: N
        KeySchema:
          - AttributeName: checkedDate
            KeyType: HASH
          - AttributeName: followers
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    jikamanuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: jikamanuFollowers
        AttributeDefinitions:
          - AttributeName: checkedDate
            AttributeType: S
          - AttributeName: followers
            AttributeType: N
        KeySchema:
          - AttributeName: checkedDate
            KeyType: HASH
          - AttributeName: followers
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    homiesfromparisTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: homiesfromparisFollowers
        AttributeDefinitions:
          - AttributeName: checkedDate
            AttributeType: S
          - AttributeName: followers
            AttributeType: N
        KeySchema:
          - AttributeName: checkedDate
            KeyType: HASH
          - AttributeName: followers
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    dvnentityTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dvnentityFollowers
        AttributeDefinitions:
          - AttributeName: checkedDate
            AttributeType: S
          - AttributeName: followers
            AttributeType: N
        KeySchema:
          - AttributeName: checkedDate
            KeyType: HASH
          - AttributeName: followers
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
